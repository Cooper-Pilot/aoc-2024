#import file;
#import core;

#include "utils.ela"

vec2 :: struct {
	x: int;
	y: int;
	to_string :: () -> string {
		return $"{x},{y}";
	}
	#operator(+=) :: (other: vec2) {
		x += other.x;
		y += other.y;
	}
}
dirs : vec2[] = {
	{-1, -1},
	{ 0, -1},
	{ 1, -1},
	{ 1,  0},
	{ 1,  1},
	{ 0,  1},
	{-1,  1},
	{-1,  0},
}
rows : string[];

xmases_at_pos :: (x: int, y: int) -> int {
	if rows[y][x] != 'X' then return 0;
	xmases := 0;
	for dir in dirs {
		pos := vec2{(int)x, (int)y};
		contains_xmas := true;
		for c in string{"XMAS"} {
			if pos.y < 0 || pos.y >= rows.length
			|| pos.x < 0 || pos.x >= rows[pos.y].length
			|| rows[pos.y][pos.x] != c {
				contains_xmas = false;
				break;
			}
			pos += dir;
		}
		if contains_xmas then xmases++;
	}
	return xmases;
}

pos_is_x_mas :: (x: int, y: int) -> bool {
	if rows[y][x] != 'A' then return false;
	if y - 1 < 0 || y + 1 >= rows.length then return false;
	if x - 1 < 0 || x + 1 >= rows[0].length then return false;
	return (
		(
			rows[y - 1][x - 1] == 'M' &&
			rows[y + 1][x + 1] == 'S'
		) || (
			rows[y - 1][x - 1] == 'S' &&
			rows[y + 1][x + 1] == 'M'
		)
	) && (
		(
			rows[y - 1][x + 1] == 'M' &&
			rows[y + 1][x - 1] == 'S'
		) || (
			rows[y - 1][x + 1] == 'S' &&
			rows[y + 1][x - 1] == 'M'
		)
	);
}

main :: () {
    part := get_part();
    input := file_read_to_string("input/4.txt");
	xmas_ct := 0;
	rows = Strings::split(input, '\n');
	for y in 0..rows.length {
		for x in 0..rows[y].length {
			if part == 2 {
				if pos_is_x_mas(x, y) then xmas_ct++;
			} else {
				xmas_ct += xmases_at_pos(x, y);
			}
		}
	}
	println($"xmas_ct: {xmas_ct}");
}
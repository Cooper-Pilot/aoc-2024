#import file;
#import core;

#include "utils.ela"

#foreign qsort :: (base: void*, nitems: u64, size: u64, func: int(void*, void*)*);

greater_than :: (left: void*, right: void*) -> int {
    return (int)((*(int*)left) > (*(int*)right));
}

main :: (argc: int, argv: char**) {
    part := get_part();
    input := File::read_all("input/1.txt");
    rows :=Strings::split(input, '\n');
    left: int[];
    right: int[];
    for row in rows {
        cols :=Strings::split(row, ' ');
        left ~= atoi(cols[0].data);
        right ~= atoi(cols[1].data);
    }
    qsort(left.data, left.length, sizeof(int), &greater_than);
    qsort(right.data, right.length, sizeof(int), &greater_than);
    if part == 1 {
        total_dist := 0;
        for i in 0..left.length {
            total_dist += abs(left[i] - right[i]);
        }
        println($"total_dist: {total_dist}");
    } else {
        similarity := 0;
        for l in left {
            count := 0;
            for r in right {
                if l == r {
                    count += 1;
                } else if l < r {
                    break;
                }
            }
            similarity += l * count;
        }
        println($"similarity: {similarity}");
    }
}